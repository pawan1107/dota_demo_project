{"version":3,"sources":["Constants/TypesRequest.ts","GraphQL/Fragments.ts","GraphQL/Query.ts","Utils/Hooks.ts","Actions/FetchConstants.tsx","Utils/Selector.ts","Constants/Api.ts","Utils/Utils.ts","Constants/StringConstant.ts","Models/ItemPurchaseTableModel.ts","Components/PurchaseItem/PurchaseItem.tsx","Components/Synergy/Synergy.tsx","Models/HeroWinGraphModel.ts","Components/Winrate/Winrate.tsx","Components/Hero/Hero.tsx","GraphQL/ApolloClient.ts","Reducers/ConstantReducer.ts","Reducers/index.tsx","Utils/Store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FETCH_CONSTANT","Hero","gql","Item","HeroDryad","HeroStatsHeroDryad","HeroDayFragment","GET_ALL_HERO_ITEM","GET_HERO_MATCHUP","GET_HERO_GRAPH","GET_HERO_PURCHASE_ITEM_FULL","useSelector","FetchConstants","useQuery","data","error","loading","dispatch","useDispatch","useEffect","type","payload","constants","selectCurrentHero","state","constant","currentHero","selectHeroList","heroes","selectItemList","items","STRATZ_HERO_CDN","GetFormatedHeroName","name","replace","ItemPurchaseTableModel","iconUrl","pickRate","winRate","this","PurchaseItem","tableData","itemList","variables","heroId","id","itemPurchaseData","heroStats","itemFullPurchase","distinctItem","events","filter","thing","index","self","findIndex","itemId","map","totalMatch","item","find","language","displayName","concat","GetFormatedItemName","Number","matchCount","toFixed","wins","getTableDataCell","className","columns","Header","accessor","sortable","Cell","props","src","original","width","defaultSorted","desc","showPaginationBottom","Synergy","bestSynergy","wortSynergy","heroList","synergyData","heroVsHeroMatchup","advantage","vs","slice","hero2","hero","heroId2","disadvantage","syngeryDiv","synergy","isBest","HeroWinGraphModel","winrate","timeStamp","date","xAxis","yAxis","Date","moment","format","Winrate","renderLineChart","heroIds","take","console","log","graphData","winCount","timestamp","lowestWinrate","Math","min","apply","highestWinrate","max","graphLowValue","floor","graphHighValue","LineChart","height","margin","top","right","bottom","left","Line","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","tickCount","domain","Tooltip","errorLink","onError","graphQLErrors","networkError","message","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","defaultState","combineReducers","action","constData","random","length","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6c30db.chunk.js","sourcesContent":["export const FETCH_CONSTANT = \"Fetch_Constant\"","import { gql } from '@apollo/client';\n\nexport const Hero = gql`\n    fragment Hero on HeroType {\n        id\n        name\n        language {\n        displayName\n        __typename\n        }\n        __typename\n    }\n`;\n\nexport const Item = gql`\n    fragment Item on ItemType {\n        id\n        name\n        language {\n        displayName\n        __typename\n        }\n        __typename\n    }\n`;\n\nexport const HeroDryad = gql`\n    fragment HeroDryad on HeroDryadType {\n        vs {\n        ...HeroStatsHeroDryad\n        __typename\n        }\n        __typename\n    }\n`;\n\nexport const HeroStatsHeroDryad = gql`\n    fragment HeroStatsHeroDryad on HeroStatsHeroDryadType {\n        heroId1\n        heroId2\n        synergy\n        __typename\n    }\n`;\n\nexport const HeroDayFragment = gql`\n    fragment HeroDayFragment on HeroWinDayType {\n        timestamp: day\n        matchCount\n        winCount\n        __typename\n    }\n`;","import { gql } from \"@apollo/client\";\nimport { Hero, HeroDayFragment, HeroDryad, HeroStatsHeroDryad, Item } from \"./Fragments\"\n\n\nexport const GET_ALL_HERO_ITEM = gql`\n    ${Hero}\n    ${Item}\n    query Constants($languageEnum: Language) {\n        constants {\n        heroes(language: $languageEnum) {\n            ...Hero\n            __typename\n        }\n        items(language: $languageEnum) {\n            ...Item\n            __typename\n        }\n        __typename\n        }\n    }\n`;\n\n\nexport const GET_HERO_MATCHUP = gql`\n    ${HeroDryad}\n    ${HeroStatsHeroDryad}\n    query GetHeroMatchup($heroId: Short!, $bracketBasicIds: [RankBracketHeroTimeDetail]) {\n        heroStats {\n          heroVsHeroMatchup(heroId: $heroId, bracketBasicIds: $bracketBasicIds) {\n            advantage {\n              ...HeroDryad\n              __typename\n            }\n            disadvantage {\n              ...HeroDryad\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n    }\n`;\n\nexport const GET_HERO_GRAPH = gql`\n    ${HeroDayFragment}\n    query GetGraphsTime($heroIds: [Short!]!, $take: Int) {\n      heroStats {\n        hero: winDay(take: $take, heroIds: $heroIds) {\n          ...HeroDayFragment\n          __typename\n        }\n        __typename\n      }\n    }\n`;\n\nexport const GET_HERO_PURCHASE_ITEM_FULL = gql`\n  query GetFullHeroPurchasePattern($matchLimit: Int = 0, $heroId: Short!) {\n    heroStats {\n      itemFullPurchase(matchLimit: $matchLimit, heroId: $heroId) {\n        heroId\n        week\n        events {\n          itemId\n          matchCount: count\n          wins: winsAverage\n          __typename\n        }\n        matchCount: count\n        __typename\n      }\n      __typename\n    }\n  }    \n`;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './Store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useQuery } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { FETCH_CONSTANT } from \"../Constants/TypesRequest\";\nimport { GET_ALL_HERO_ITEM } from \"../GraphQL/Query\";\nimport { useAppDispatch } from \"../Utils/Hooks\";\n\nfunction FetchConstants(): JSX.Element {\n\n    const { error, loading, data } = useQuery(GET_ALL_HERO_ITEM);\n    const dispatch = useAppDispatch();\n    useEffect(() => {\n    if (data) {\n        dispatch({\n        type: FETCH_CONSTANT,\n        payload: data.constants \n        })\n    }\n    }, [data]);\n\n    return (<> </>);\n}\n\nexport default FetchConstants;\n","import { ConstantModel } from \"../Models/ConstantModel\";\n\nexport const selectCurrentHero = (state: ConstantModel) => state.constant.currentHero;\nexport const selectHeroList = (state: ConstantModel) => state.constant.heroes;\nexport const selectItemList = (state: ConstantModel) => state.constant.items;\n","export const STRATZ_GRAPHQL_API = \"https://api.stratz.com/graphql\";\nexport const STRATZ_HERO_CDN = \"https://cdn.stratz.com/images/dota2/heroes/\";\nexport const STRATZ_ITEM_CDN = \"https://cdn.stratz.com/images/dota2/items/\";","import { STRATZ_HERO_CDN, STRATZ_ITEM_CDN } from \"../Constants/Api\";\nimport { HORZ_EXTENSION, ICON_EXTENSION, NPC_HERO, NPC_ITEM, PNG_EXTENSION } from \"../Constants/StringConstant\";\n\nfunction GetFormatedHeroName(name: string): string {\n    return name.replace(NPC_HERO,'');\n}\nfunction GetFormatedItemName(name: string): string {\n    return name.replace(NPC_ITEM,'');\n}\n\nexport function GetHeroIcon(name: string): string {\n    return STRATZ_HERO_CDN.concat(GetFormatedHeroName(name), ICON_EXTENSION);\n}\n\nexport function GetHeroHorz(name: string): string {\n    return STRATZ_HERO_CDN.concat(GetFormatedHeroName(name), HORZ_EXTENSION);\n}\n\nexport function GetItemIcon(name: string): string {\n    return STRATZ_ITEM_CDN.concat(GetFormatedItemName(name), PNG_EXTENSION);\n}","export const NPC_HERO = \"npc_dota_hero_\"\nexport const NPC_ITEM = \"item_\"\nexport const ICON_EXTENSION = \"_icon.png\"\nexport const MODEL_EXTENSION = \"_model.png\"\nexport const VERT_EXTENSION = \"_vert.png\"\nexport const HORZ_EXTENSION = \"_horz.png\"\nexport const PNG_EXTENSION = \".png\"\nexport const DATE_FORMAT = \"MMM Do\"","export class ItemPurchaseTableModel {\n    public name: string;\n    public iconUrl: string;\n    public pickRate: number;\n    public winRate: number;\n\n    public constructor(name: string, iconUrl: string, pickRate: number, winRate: number) {\n        this.name = name;\n        this.iconUrl = iconUrl;\n        this.pickRate = pickRate;\n        this.winRate = winRate;\n    }\n}\n","import { useQuery } from '@apollo/client';\nimport React from 'react'\nimport { useSelector } from 'react-redux';\nimport { GET_HERO_PURCHASE_ITEM_FULL } from '../../GraphQL/Query';\nimport { FullPurchaseItemModel } from '../../Models/FullPurchaseItemModel copy';\nimport { ISynergy } from '../../Models/HeroStatsInterface';\nimport { ItemPurchaseTableModel } from '../../Models/ItemPurchaseTableModel';\nimport { PurchaseItemHeroModel } from '../../Models/PurchaseItemHeroModel';\nimport { selectCurrentHero, selectItemList } from '../../Utils/Selector';\nimport { GetItemIcon } from '../../Utils/Utils';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport './purchaseItem.scss';\n\nexport default function PurchaseItem() {\n\n    let tableData;\n    const itemList = useSelector(selectItemList);\n    const currentHero = useSelector(selectCurrentHero);\n    const { error, loading, data } = useQuery(GET_HERO_PURCHASE_ITEM_FULL, {\n        variables: { heroId: currentHero.id}\n    });\n\n    const getTableDataCell = (data: PurchaseItemHeroModel, totalMatch: number): ItemPurchaseTableModel | null => {\n        const item = itemList.find(item => item.id === data.itemId);\n        if (item) {\n            const cell = new ItemPurchaseTableModel(\n                item.language.displayName,\n                GetItemIcon(item.name),\n                Number((data.matchCount/ totalMatch * 100).toFixed(1)),\n                Number((data.wins * 100).toFixed(1))\n            )\n            return cell;\n        }\n\n        return null;\n    }\n\n\n    if (data) {\n        const itemPurchaseData = (data as ISynergy).heroStats.itemFullPurchase as FullPurchaseItemModel;\n        const distinctItem = itemPurchaseData.events.filter((thing, index, self) =>\n        index === self.findIndex((data) => (\n          data.itemId === thing.itemId\n        ))\n      )\n        tableData = distinctItem.map((data) => getTableDataCell(data, itemPurchaseData.matchCount))\n    }\n\n    return tableData && (\n        <div className = \"purchaseItem-container\">\n            <h2 className = \"synergy-header\">Item Purchase Details</h2>\n            <ReactTable\n                data={tableData}\n                columns={[\n                    {\n                    Header: \"Item\",\n                    accessor: \"imageUrl\",\n                    className: \"item-cell\",\n                    sortable:false,\n                    Cell: (props) =>  (\n                        <div className = \"item-name-cell\">\n                            <img className = \"item-icon\" src= {props.original.iconUrl}\n                            width={60}\n                            />\n                            <span className = \"item-name\">{props.original.name}</span>\n                        </div>\n                    )\n                    },\n                    {\n                        Header: \"Pick Rate\",\n                        className: \"pick-rate-cell\",\n                        accessor: \"pickRate\",\n                        Cell: (props) =>  (\n                            props.original.pickRate + \" %\"\n                        )\n                    },\n                    {\n                        Header: \"Win Rate\",\n                        className: \"win-rate-cell\",\n                        accessor: \"winRate\",\n                        Cell: (props) =>  (\n                            props.original.winRate + \" %\"\n                        )\n                    }                    \n                ]}\n                defaultSorted={[\n                    {\n                      id: \"pickRate\",\n                      desc: true\n                    }\n                  ]}\n                showPaginationBottom={false}\n                className=\"-striped -highlight react-table\"\n                \n            />            \n        </div>\n    ) || <></>\n}\n","import { useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux';\nimport { FETCH_CONSTANT } from '../../Constants/TypesRequest';\nimport { GET_HERO_MATCHUP } from '../../GraphQL/Query';\nimport { HeroModel } from '../../Models/HeroModel';\nimport { ISynergy } from '../../Models/HeroStatsInterface';\nimport { HeroSynergyModel, IHeroSynergy } from '../../Models/HeroSynergyModel';\nimport { selectCurrentHero, selectHeroList } from '../../Utils/Selector';\nimport { GetHeroIcon } from '../../Utils/Utils';\nimport './synergy.scss';\n\nfunction Synergy(): JSX.Element {\n    let bestSynergy: HeroSynergyModel[] = [];\n    let wortSynergy: HeroSynergyModel[] = [];\n    const currentHero = useSelector(selectCurrentHero);\n    const heroList = useSelector(selectHeroList);\n    const totalElementDisplay = 3;\n    const { error, loading, data } = useQuery(GET_HERO_MATCHUP, {\n        variables: { heroId: currentHero.id}\n    });\n\n    if (data) {\n        const synergyData = data as ISynergy;\n    \n        bestSynergy = synergyData && synergyData.heroStats.heroVsHeroMatchup.advantage[0].vs.slice(0, totalElementDisplay);\n        bestSynergy = bestSynergy.map((data) => ({...data, hero2: heroList.find((hero) => hero.id === data.heroId2) as HeroModel}));\n    \n        wortSynergy = synergyData && synergyData.heroStats.heroVsHeroMatchup.disadvantage[0].vs.slice(0, totalElementDisplay);\n        wortSynergy = wortSynergy.map((data) => ({...data, hero2: heroList.find((hero) => hero.id === data.heroId2) as HeroModel}));\n    }\n\n    const syngeryDiv = (synergy: IHeroSynergy, isBest: boolean) => {\n        return (<div className = \"synergy-cell\"> \n            <img className = \"hero-icon\" src={ GetHeroIcon(synergy.hero2.name) } />\n            <span className = \"synergy-value\">{isBest ? \"+ \": \"\"}{synergy.synergy.toFixed(1)}</span>\n        </div>)\n    }\n\n    return data && (\n        <div className = \"synergy-container\">\n            <h2 className = \"synergy-header\">Synergy</h2>\n            <div className = \"synergy-body\">\n                <div className = \"best-against synergy-column\">\n                    <h3 className = \"column-header\">Best Against</h3>\n                    {\n                       bestSynergy.map(synergy => syngeryDiv(synergy, true)) \n                    }\n\n                </div>\n                <div className = \"worst-against synergy-column\">\n                    <h3 className = \"column-header\">Worst Against</h3>\n                    {\n                       wortSynergy.map(synergy => syngeryDiv(synergy, false)) \n                    }\n\n                </div>\n\n            </div>\n            \n        </div>\n    ) || <></>\n}\n\nexport default Synergy;\n","import moment from 'moment';\nimport { DATE_FORMAT } from '../Constants/StringConstant';\n\nexport class HeroWinGraphModel {\n    public winrate: number;\n    public timeStamp: number;\n    public matchCount: number;\n    public date: Date;\n    public xAxis: string;\n    public yAxis: string;\n\n    public constructor(winrate: number, timeStamp: number, matchCount: number) {\n        this.winrate = winrate;\n        this.timeStamp = timeStamp;\n        this.matchCount = matchCount;\n        this.date = new Date(timeStamp * 1000);\n        this.xAxis = moment(this.date).format(DATE_FORMAT);\n        this.yAxis = winrate + \" %\";\n    }\n}\n","import { useQuery } from '@apollo/client';\nimport React from 'react'\nimport { useSelector } from 'react-redux';\nimport { GET_HERO_GRAPH } from '../../GraphQL/Query';\nimport { selectCurrentHero } from '../../Utils/Selector';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { ISynergy } from '../../Models/HeroStatsInterface';\nimport { HeroWinDataModel } from '../../Models/HeroWinDataModel';\nimport { HeroWinGraphModel } from '../../Models/HeroWinGraphModel';\n\n\nfunction Winrate(): JSX.Element {\n    let renderLineChart: JSX.Element = <></>;\n    const currentHero = useSelector(selectCurrentHero);\n    const totalDays = 10;\n    const { error, loading, data } = useQuery(GET_HERO_GRAPH, {\n        variables: { heroIds: [currentHero.id], take: totalDays}\n    });\n    if (data) {\n        console.log(data);\n        const heroWinData = (data as ISynergy).heroStats.hero as HeroWinDataModel[];\n        const graphData = heroWinData.map((data) => new HeroWinGraphModel(\n            Number((data.winCount / data.matchCount * 100).toFixed(1)),\n            data.timestamp,\n            data.matchCount)\n        )\n        const lowestWinrate = Math.min.apply(Math, graphData.map(data => data.winrate));\n        const highestWinrate = Math.max.apply(Math, graphData.map(data => data.winrate));\n\n        const graphLowValue = lowestWinrate - 5 < 0 ? 0 : Math.floor(lowestWinrate - 5);\n        const graphHighValue = highestWinrate + 5 > 100 ? 100 : Math.floor(highestWinrate + 5); \n\n        renderLineChart = (\n            <LineChart width={600} height={300} data={graphData} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n              <Line type=\"monotone\" dataKey=\"winrate\" stroke=\"#8884d8\" />\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n              <XAxis dataKey=\"xAxis\" />\n              <YAxis tickCount={10} domain={[graphLowValue, graphHighValue]} />\n              <Tooltip />\n            </LineChart>\n          );\n    }\n    return data && (\n        <div className = \"synergy-container\">\n            <h2 className = \"synergy-header\">Win Rate Over Time</h2>\n            <div className = \"synergy-body\">\n                {renderLineChart}\n            </div>\n        </div>\n    ) || <></>\n}\n\nexport default Winrate;","import { useSelector } from 'react-redux';\nimport { selectCurrentHero } from '../../Utils/Selector';\nimport { GetHeroHorz } from '../../Utils/Utils';\nimport PurchaseItem from '../PurchaseItem/PurchaseItem';\nimport Synergy from '../Synergy/Synergy';\nimport Winrate from '../Winrate/Winrate';\nimport './hero.scss';\n\nfunction Hero(): JSX.Element {\n    const currentHero = useSelector(selectCurrentHero);\n    return currentHero ? (\n        <div className = \"hero-container\">\n            <div className = \"hero-section\">\n                <img className = \"hero-image\" src={ GetHeroHorz(currentHero.name) } />\n                <h1 className = \"hero-name\">{currentHero.language.displayName}</h1>\n            </div>\n            <div className = \"hero-body\">\n                <Synergy/>\n                <Winrate/>\n                <PurchaseItem/>\n            </div>\n            \n        </div>  \n    ) : <></>;\n}\n\n\nexport default Hero;","import { onError } from \"@apollo/client/link/error\";\nimport { STRATZ_GRAPHQL_API } from \"../Constants/Api\";\nimport {\n    ApolloClient,\n    InMemoryCache,\n    HttpLink,\n    from,\n  } from \"@apollo/client\";\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n        graphQLErrors.map(({ message }) => {\n        console.log(\"GraphQL Error - \", message)\n        });\n    } else if (networkError) {\n        console.log(\"Network Error - \", networkError.message)\n    }\n});\n\nconst link = from([\n    errorLink,\n    new HttpLink({ uri: STRATZ_GRAPHQL_API }),\n]);\n\nexport const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: link,\n});\n","import { FETCH_CONSTANT } from \"../Constants/TypesRequest\";\nimport { ConstantQueryModel } from \"../Models/ConstantQueryModel\";\n\nconst defaultState = {\n    heroes: [],\n    items: [],\n    currentHero: null\n  };\n  \n  export default function(state = defaultState, action: any) {\n\n    switch (action.type) {\n      case FETCH_CONSTANT:\n        const constData = action.payload as ConstantQueryModel;\n        const currentHero = constData.heroes[Math.floor(Math.random() * constData.heroes.length)];\n        return {\n          ...state,\n          heroes: constData.heroes,\n          items: constData.items,\n          currentHero: currentHero\n        };\n      default:\n        return state;\n    }\n  }","import { combineReducers } from 'redux';\nimport ConstantReducer from './ConstantReducer';\n\nexport default combineReducers({\n  constant: ConstantReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n  )\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;","import { ApolloProvider } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport FetchConstants from './Actions/FetchConstants';\nimport './App.css';\nimport Hero from './Components/Hero/Hero';\nimport { client } from './GraphQL/ApolloClient';\nimport store from './Utils/Store';\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <FetchConstants />\n          <Hero />\n        </div>\n      </ApolloProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}