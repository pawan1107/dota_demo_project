{"version":3,"sources":["Constants/Api.ts","Constants/StringConstant.ts","Utils/Utils.ts","Constants/TypesRequest.ts","GraphQL/Fragments.ts","GraphQL/Query.ts","Utils/Hooks.ts","Models/ItemPurchaseTableModel.ts","Components/PurchaseItem/PurchaseItem.tsx","Components/Synergy/Synergy.tsx","Models/HeroWinGraphModel.ts","Components/Winrate/Winrate.tsx","Components/HeroData/HeroData.tsx","Components/Hero/Hero.tsx","GraphQL/ApolloClient.ts","Reducers/ConstantReducer.ts","Reducers/index.tsx","Reducers/HeroDataReducers.ts","Utils/Store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["STRATZ_HERO_CDN","MONTHS","GetFormatedHeroName","name","replace","FETCH_CONSTANT","FETCH_HERO_DATA","Hero","gql","Item","HeroDryad","HeroStatsHeroDryad","HeroDayFragment","GET_ALL_CONSTANT","GET_ALL_HERO_DATA","useAppDispatch","useDispatch","ItemPurchaseTableModel","iconUrl","pickRate","winRate","this","connect","state","itemList","constantData","items","itemData","heroData","props","tableData","itemPurchaseData","events","filter","thing","index","self","findIndex","data","itemId","map","totalMatch","item","find","id","language","displayName","concat","GetFormatedItemName","Number","matchCount","toFixed","wins","getTableDataCell","className","columns","Header","accessor","sortable","Cell","alt","original","src","width","defaultSorted","desc","defaultPageSize","length","showPaginationBottom","heroList","heroes","heroVsHeroMatchup","matchupData","bestSynergy","wortSynergy","advantage","vs","slice","hero2","hero","heroId2","disadvantage","syngeryDiv","synergy","isBest","toString","HeroWinGraphModel","winrate","timeStamp","date","xAxis","yAxis","Date","getMonth","getDate","winData","renderLineChart","graphData","winCount","timestamp","lowestWinrate","Math","min","apply","highestWinrate","max","graphLowValue","floor","graphHighValue","LineChart","height","margin","top","right","bottom","left","Line","type","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","tickCount","domain","Tooltip","currentHero","useQuery","variables","heroId","error","loading","dispatch","useEffect","payload","heroStats","constants","errorLink","onError","graphQLErrors","networkError","message","console","client","ApolloClient","cache","InMemoryCache","link","from","HttpLink","uri","defaultState","combineReducers","action","constData","random","itemFullPurchase","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76a085c2.chunk.js","sourcesContent":["export const STRATZ_GRAPHQL_API = \"https://api.stratz.com/graphql\";\r\nexport const STRATZ_HERO_CDN = \"https://cdn.stratz.com/images/dota2/heroes/\";\r\nexport const STRATZ_ITEM_CDN = \"https://cdn.stratz.com/images/dota2/items/\";","export const NPC_HERO = \"npc_dota_hero_\"\r\nexport const NPC_ITEM = \"item_\"\r\nexport const ICON_EXTENSION = \"_icon.png\"\r\nexport const HORZ_EXTENSION = \"_horz.png\"\r\nexport const PNG_EXTENSION = \".png\"\r\n\r\nexport const MONTHS = [\"Jan\", \"Feb\", \"Mar\",\"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n","import { STRATZ_HERO_CDN, STRATZ_ITEM_CDN } from \"../Constants/Api\";\r\nimport { HORZ_EXTENSION, ICON_EXTENSION, NPC_HERO, NPC_ITEM, PNG_EXTENSION } from \"../Constants/StringConstant\";\r\n\r\nfunction GetFormatedHeroName(name: string): string {\r\n    return name.replace(NPC_HERO,'');\r\n}\r\nfunction GetFormatedItemName(name: string): string {\r\n    return name.replace(NPC_ITEM,'');\r\n}\r\n\r\nexport function GetHeroIcon(name: string): string {\r\n    return STRATZ_HERO_CDN.concat(GetFormatedHeroName(name), ICON_EXTENSION);\r\n}\r\n\r\nexport function GetHeroHorz(name: string): string {\r\n    return STRATZ_HERO_CDN.concat(GetFormatedHeroName(name), HORZ_EXTENSION);\r\n}\r\n\r\nexport function GetItemIcon(name: string): string {\r\n    return STRATZ_ITEM_CDN.concat(GetFormatedItemName(name), PNG_EXTENSION);\r\n}","export const FETCH_CONSTANT = \"Fetch_Constant\"\r\nexport const FETCH_HERO_DATA = \"HERO_DATA\"","import { gql } from '@apollo/client';\r\n\r\nexport const Hero = gql`\r\n    fragment Hero on HeroType {\r\n        id\r\n        name\r\n        language {\r\n        displayName\r\n        __typename\r\n        }\r\n        __typename\r\n    }\r\n`;\r\n\r\nexport const Item = gql`\r\n    fragment Item on ItemType {\r\n        id\r\n        name\r\n        language {\r\n        displayName\r\n        __typename\r\n        }\r\n        __typename\r\n    }\r\n`;\r\n\r\nexport const HeroDryad = gql`\r\n    fragment HeroDryad on HeroDryadType {\r\n        vs {\r\n        ...HeroStatsHeroDryad\r\n        __typename\r\n        }\r\n        __typename\r\n    }\r\n`;\r\n\r\nexport const HeroStatsHeroDryad = gql`\r\n    fragment HeroStatsHeroDryad on HeroStatsHeroDryadType {\r\n        heroId1\r\n        heroId2\r\n        synergy\r\n        __typename\r\n    }\r\n`;\r\n\r\nexport const HeroDayFragment = gql`\r\n    fragment HeroDayFragment on HeroWinDayType {\r\n        timestamp: day\r\n        matchCount\r\n        winCount\r\n        __typename\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\nimport { Hero, HeroDayFragment, HeroDryad, HeroStatsHeroDryad, Item } from \"./Fragments\"\r\n\r\n\r\nexport const GET_ALL_CONSTANT = gql`\r\n    ${Hero}\r\n    ${Item}\r\n    query Constants($languageEnum: Language) {\r\n        constants {\r\n        heroes(language: $languageEnum) {\r\n            ...Hero\r\n            __typename\r\n        }\r\n        items(language: $languageEnum) {\r\n            ...Item\r\n            __typename\r\n        }\r\n        __typename\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_ALL_HERO_DATA = gql`\r\n    ${HeroDryad}\r\n    ${HeroDayFragment}\r\n    ${HeroStatsHeroDryad}\r\n    query GetHeroMatchup($heroId: Short!) {\r\n      heroStats {\r\n        heroVsHeroMatchup(heroId: $heroId) {\r\n          advantage {\r\n            ...HeroDryad\r\n            __typename\r\n          }\r\n          disadvantage {\r\n            ...HeroDryad\r\n            __typename\r\n          }\r\n          __typename\r\n        }\r\n        hero: winDay(heroIds: [$heroId], take: 7) {\r\n          ...HeroDayFragment\r\n          __typename\r\n        }\r\n        itemFullPurchase(heroId: $heroId, matchLimit: 0) {\r\n          heroId\r\n          week\r\n          events {\r\n            itemId\r\n            matchCount: count\r\n            wins: winsAverage\r\n            __typename\r\n          }\r\n          matchCount: count\r\n          __typename\r\n        }\r\n        __typename\r\n      }\r\n    } \r\n`;","import { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from './Store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","export class ItemPurchaseTableModel {\r\n    public name: string;\r\n    public iconUrl: string;\r\n    public pickRate: number;\r\n    public winRate: number;\r\n\r\n    public constructor(name: string, iconUrl: string, pickRate: number, winRate: number) {\r\n        this.name = name;\r\n        this.iconUrl = iconUrl;\r\n        this.pickRate = pickRate;\r\n        this.winRate = winRate;\r\n    }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { ItemPurchaseTableModel } from '../../Models/ItemPurchaseTableModel';\r\nimport { PurchaseItemHeroModel } from '../../Models/PurchaseItemHeroModel';\r\nimport { GetItemIcon } from '../../Utils/Utils';\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport './purchaseItem.scss';\r\n\r\nfunction PurchaseItem(props) {\r\n\r\n    let tableData: ItemPurchaseTableModel[] = [];\r\n\r\n    // Generate table individual cell data\r\n    const getTableDataCell = (data: PurchaseItemHeroModel, totalMatch: number): ItemPurchaseTableModel | null => {\r\n        const item = props.itemList.find(item => item.id === data.itemId);\r\n        if (item) {\r\n            return new ItemPurchaseTableModel(\r\n                item.language.displayName,\r\n                GetItemIcon(item.name),\r\n                Number((data.matchCount/ totalMatch * 100).toFixed(1)),\r\n                Number((data.wins * 100).toFixed(1))\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n    \r\n    if (props.itemData) {\r\n        const itemPurchaseData = props.itemData;\r\n        const distinctItem = itemPurchaseData.events.filter((thing, index, self) =>\r\n        index === self.findIndex((data) => (\r\n          data.itemId === thing.itemId\r\n        ))\r\n      )\r\n        tableData = distinctItem.map((data) => getTableDataCell(data, itemPurchaseData.matchCount)) as ItemPurchaseTableModel[];\r\n    }\r\n\r\n    return (\r\n        props.itemData && (\r\n        <div className = \"purchaseItem-container\">\r\n            <h2 className = \"synergy-header\">Item Purchase Details</h2>\r\n            <ReactTable\r\n                data={tableData}\r\n                columns={[\r\n                    {\r\n                        Header: \"Item\",\r\n                        accessor: \"imageUrl\",\r\n                        className: \"item-cell\",\r\n                        sortable:false,\r\n                        Cell: (data) =>  (\r\n                            <div className = \"item-name-cell\">\r\n                            <img className = \"item-icon\" alt= {\"img-\" + data.original.name} src= {data.original.iconUrl} width={60}/>\r\n                                <span className = \"item-name\">{data.original.name}</span>\r\n                            </div>\r\n                        ),\r\n                        width: 240\r\n                    },\r\n                    {\r\n                        Header: \"Pick Rate\",\r\n                        className: \"pick-rate-cell\",\r\n                        accessor: \"pickRate\",\r\n                        Cell: (data) =>  (\r\n                            data.original.pickRate + \" %\"\r\n                        )\r\n                    },\r\n                    {\r\n                        Header: \"Win Rate\",\r\n                        className: \"win-rate-cell\",\r\n                        accessor: \"winRate\",\r\n                        Cell: (data) =>  (\r\n                            data.original.winRate + \" %\"\r\n                        )\r\n                    }                    \r\n                ]}\r\n                defaultSorted={[\r\n                    {\r\n                      id: \"pickRate\",\r\n                      desc: true\r\n                    }\r\n                  ]}\r\n                defaultPageSize = {tableData.length}\r\n                showPaginationBottom={false}\r\n                className=\"-striped -highlight react-table\"\r\n                \r\n            />            \r\n        </div>\r\n    )) || <></>\r\n}\r\n\r\n\r\n\r\nfunction mapState(state) {\r\n    const itemList = state.constantData.items;\r\n    const itemData = state.heroData?.itemData;\r\n    return { itemList, itemData};\r\n}\r\n\r\nexport default connect(mapState, null)(PurchaseItem);\r\n","import { connect } from 'react-redux';\r\nimport { HeroModel } from '../../Models/HeroModel';\r\nimport { HeroSynergyModel, IHeroSynergy } from '../../Models/HeroSynergyModel';\r\nimport { GetHeroIcon } from '../../Utils/Utils';\r\nimport './synergy.scss';\r\n\r\nfunction Synergy(props): JSX.Element {\r\n    let bestSynergy = [];\r\n    let wortSynergy = [];\r\n    const totalElementDisplay = 3;\r\n\r\n    if (props.heroVsHeroMatchup) {\r\n        const advantage = props.heroVsHeroMatchup.advantage[0]\r\n        // Get Best against data\r\n        if (advantage) {\r\n            const bestSynergyData = advantage.vs.slice(0, totalElementDisplay);\r\n            bestSynergy = bestSynergyData.map((data) => \r\n                ({...data, hero2: props.heroList.find((hero) => hero.id === data.heroId2)}));\r\n        }\r\n\r\n        const disadvantage = props.heroVsHeroMatchup.disadvantage[0]\r\n        // Get worst against data\r\n        if (disadvantage) {\r\n            const wortSynergyData = disadvantage.vs.slice(0, totalElementDisplay);\r\n            wortSynergy = wortSynergyData.map((data) =>\r\n                ({...data, hero2: props.heroList.find((hero) => hero.id === data.heroId2)}));\r\n        }\r\n    }\r\n\r\n    // Generate each row of synergy\r\n    const syngeryDiv = (synergy: IHeroSynergy, isBest: boolean) => {\r\n        return (<div key = {synergy.heroId2.toString()} className = \"synergy-cell\"> \r\n            <img className = \"hero-icon\" alt = \"synergy.hero2.name\" src={ GetHeroIcon(synergy.hero2.name) } />\r\n            <span className = \"synergy-value\">{isBest ? \"+ \": \"\"}{synergy.synergy.toFixed(1)}</span>\r\n        </div>)\r\n    }\r\n\r\n    return (\r\n        props.heroVsHeroMatchup && (\r\n        <div className = \"synergy-container\">\r\n            <h2 className = \"synergy-header\">Synergy</h2>\r\n            <div className = \"synergy-body\">\r\n                {bestSynergy.length &&\r\n                    <div className = \"best-against synergy-column\">\r\n                        <h3 className = \"column-header\">Best Against</h3>\r\n                        {\r\n                        bestSynergy.map(synergy => syngeryDiv(synergy, true)) \r\n                        }\r\n\r\n                    </div>\r\n                }\r\n                {wortSynergy.length &&\r\n                <div className = \"worst-against synergy-column\">\r\n                    <h3 className = \"column-header\">Worst Against</h3>\r\n                    {\r\n                       wortSynergy.map(synergy => syngeryDiv(synergy, false)) \r\n                    }\r\n\r\n                </div>\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )) || <></>\r\n}\r\n\r\nfunction mapState(state) {\r\n    const heroList = state.constantData.heroes;\r\n    const heroVsHeroMatchup = state.heroData?.matchupData;\r\n    return { heroList, heroVsHeroMatchup};\r\n}\r\n\r\nexport default connect(mapState, null)(Synergy);\r\n","import { MONTHS } from '../Constants/StringConstant';\r\n\r\nexport class HeroWinGraphModel {\r\n    public winrate: number;\r\n    public timeStamp: number;\r\n    public matchCount: number;\r\n    public date: Date;\r\n    public xAxis: string;\r\n    public yAxis: string;\r\n\r\n    public constructor(winrate: number, timeStamp: number, matchCount: number) {\r\n        this.winrate = winrate;\r\n        this.timeStamp = timeStamp;\r\n        this.matchCount = matchCount;\r\n        this.date = new Date(timeStamp * 1000);\r\n        this.xAxis = MONTHS[this.date.getMonth()] + \" \" + this.date.getDate() + \"th\";\r\n        this.yAxis = winrate + \" %\";\r\n    }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\r\nimport { HeroWinGraphModel } from '../../Models/HeroWinGraphModel';\r\nimport './winrate.scss';\r\n\r\n\r\nfunction Winrate(props): JSX.Element {\r\n    let renderLineChart: JSX.Element = <></>;\r\n    if (props.winData) {\r\n        // generate Graph data\r\n        const graphData = props.winData.map((data) =>\r\n            new HeroWinGraphModel(\r\n                Number((data.winCount / data.matchCount * 100).toFixed(1)),\r\n                data.timestamp,\r\n                data.matchCount\r\n            )\r\n        )\r\n        // Get minimum and maximum winrate\r\n        const lowestWinrate = Math.min.apply(Math, graphData.map(data => data.winrate));\r\n        const highestWinrate = Math.max.apply(Math, graphData.map(data => data.winrate));\r\n\r\n        // Get Graph value based on mimimum and maximum winrate\r\n        const graphLowValue = lowestWinrate - 5 < 0 ? 0 : Math.floor(lowestWinrate - 5);\r\n        const graphHighValue = highestWinrate + 5 > 100 ? 100 : Math.floor(highestWinrate + 5); \r\n\r\n        renderLineChart = (\r\n            <LineChart className = \"hero-chart\" width={550} height={300} data={graphData} margin={{ top: 5, right: 60, bottom: 5, left: 0 }}>\r\n              <Line type=\"monotone\" dataKey=\"winrate\" stroke=\"#8884d8\" />\r\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n              <XAxis className = \"x-axis\" dataKey=\"xAxis\" />\r\n              <YAxis className = \"y-axis\" tickCount={10} domain={[graphLowValue, graphHighValue]} />\r\n              <Tooltip />\r\n            </LineChart>\r\n          );\r\n    }\r\n    return (\r\n        props.winData && (\r\n        <div className = \"winrate-container\">\r\n            <h2 className = \"winrate-header\">Win Rate Over Time</h2>\r\n            <div className = \"winrate-body\">\r\n                {renderLineChart}\r\n            </div>\r\n        </div>\r\n    )) || <></>\r\n}\r\n\r\nfunction mapState(state) {\r\n    const winData = state.heroData?.winData;\r\n    return { winData};\r\n}\r\n\r\nexport default connect(mapState, null)(Winrate);\r\n","import { useQuery } from '@apollo/client';\r\nimport { useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FETCH_HERO_DATA } from '../../Constants/TypesRequest';\r\nimport { GET_ALL_HERO_DATA } from '../../GraphQL/Query';\r\nimport { useAppDispatch } from '../../Utils/Hooks';\r\nimport PurchaseItem from '../PurchaseItem/PurchaseItem';\r\nimport Synergy from '../Synergy/Synergy';\r\nimport Winrate from '../Winrate/Winrate';\r\nimport './heroData.scss';\r\n\r\nfunction HeroData(props) {\r\n\r\n    const { error, loading, data } = useQuery(GET_ALL_HERO_DATA, {\r\n        variables: { heroId: props.currentHero.id}\r\n    });\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n    if (data) {\r\n        dispatch({\r\n        type: FETCH_HERO_DATA,\r\n        payload: data.heroStats \r\n        })\r\n    }\r\n    }, [data]);\r\n\r\n\r\n    if (loading) {\r\n        return (<div>Loading ...</div>)\r\n    }\r\n\r\n    if (error) {\r\n        return (<div>Something went wrong. Please Try again</div>)\r\n    }\r\n\r\n    return (\r\n        data && (\r\n        <div className = \"hero-body\">\r\n            <Synergy/>\r\n            <Winrate/>\r\n            <PurchaseItem/>\r\n        </div>\r\n        )\r\n    ) || <></>\r\n}\r\n\r\n\r\nfunction mapState(state) {\r\n    const currentHero = state.constantData.currentHero;\r\n    return { currentHero };\r\n}\r\n\r\nexport default connect(mapState, null)(HeroData);\r\n","import { connect } from 'react-redux';\r\nimport { GetHeroHorz } from '../../Utils/Utils';\r\nimport './hero.scss';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useEffect } from 'react';\r\nimport { FETCH_CONSTANT } from '../../Constants/TypesRequest';\r\nimport { GET_ALL_CONSTANT } from '../../GraphQL/Query';\r\nimport { useAppDispatch } from '../../Utils/Hooks';\r\nimport HeroData from '../HeroData/HeroData';\r\n\r\nfunction Hero(props): JSX.Element {\r\n\r\n    const { error, loading, data } = useQuery(GET_ALL_CONSTANT);\r\n    const dispatch = useAppDispatch();\r\n    useEffect(() => {\r\n    if (data) {\r\n        dispatch({\r\n        type: FETCH_CONSTANT,\r\n        payload: data.constants \r\n        })\r\n    }\r\n    }, [data]);\r\n\r\n    if (loading) {\r\n        return (<div>Loading ...</div>)\r\n    }\r\n\r\n    if (error) {\r\n        return (<div>Something went wrong. Please Try again</div>)\r\n    }\r\n        \r\n    return props.currentHero ? (\r\n        <div className = \"hero-container\">\r\n            <div className = \"hero-section\">\r\n                <img className = \"hero-image\" alt = {props.currentHero.language.displayName} src={ GetHeroHorz(props.currentHero.name) } />\r\n                <h1 className = \"hero-name\">{props.currentHero.language.displayName}</h1>\r\n            </div>\r\n            <HeroData />\r\n            \r\n        </div>  \r\n    ) : <></>;\r\n}\r\n\r\nfunction mapState(state) {\r\n    const currentHero = state.constantData.currentHero;\r\n    return { currentHero };\r\n}\r\n\r\nexport default connect(mapState, null)(Hero);","import { onError } from \"@apollo/client/link/error\";\r\nimport { STRATZ_GRAPHQL_API } from \"../Constants/Api\";\r\nimport {\r\n    ApolloClient,\r\n    InMemoryCache,\r\n    HttpLink,\r\n    from,\r\n  } from \"@apollo/client\";\r\n\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    if (graphQLErrors) {\r\n        graphQLErrors.map(({ message }) => {\r\n        console.error(\"GraphQL Error - \", message)\r\n        });\r\n    } else if (networkError) {\r\n        console.error(\"Network Error - \", networkError.message)\r\n    }\r\n});\r\n\r\n// Create new apollo client\r\nexport const client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: from([\r\n        errorLink,\r\n        new HttpLink({ uri: STRATZ_GRAPHQL_API }),\r\n    ]),\r\n});\r\n","import { FETCH_CONSTANT } from \"../Constants/TypesRequest\";\r\n\r\nconst defaultState = {\r\n    heroes: [],\r\n    items: [],\r\n    currentHero: null\r\n  };\r\n  \r\n  export function constantData(state = defaultState, action: any) {\r\n    switch (action.type) {\r\n      case FETCH_CONSTANT:\r\n        const constData = action.payload;\r\n        // select random hero from hero list\r\n        const currentHero = constData.heroes[Math.floor(Math.random() * constData.heroes.length)];\r\n        return {\r\n          ...state,\r\n          heroes: constData.heroes,\r\n          items: constData.items,\r\n          currentHero: currentHero\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { combineReducers } from 'redux';\r\nimport { constantData } from './ConstantReducer';\r\nimport { heroData } from './HeroDataReducers';\r\n\r\nexport default combineReducers({\r\n  constantData,\r\n  heroData\r\n});","import { FETCH_HERO_DATA } from \"../Constants/TypesRequest\";\r\n\r\n\r\n  export function heroData(state = {}, action: any) {\r\n\r\n    switch (action.type) {\r\n      case FETCH_HERO_DATA:\r\n        const constData = action.payload;\r\n        return {\r\n          matchupData: constData.heroVsHeroMatchup,\r\n          winData: constData.hero,\r\n          itemData: constData.itemFullPurchase\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../Reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;","import { ApolloProvider } from '@apollo/client';\r\nimport { Provider } from 'react-redux';\r\nimport './App.css';\r\nimport Hero from './Components/Hero/Hero';\r\nimport { client } from './GraphQL/ApolloClient';\r\nimport store from './Utils/Store';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Provider store={store}>\r\n      <ApolloProvider client={client}>\r\n        <div className=\"App\">\r\n          <Hero />\r\n        </div>\r\n      </ApolloProvider>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}